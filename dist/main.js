(()=>{"use strict";var e="http://178.157.218.63:25565",t=function(e,t,n){var o=JSON.stringify(t),r=new Headers;r.append("Content-Type","application/json");try{fetch(e,{method:"POST",headers:r,body:o,redirect:"follow"}).then((function(e){return e.json()})).then((function(e){return n(e)})).catch((function(e){return n(e,!0)}))}catch(e){n(e,!0)}},n={createRoom:document.getElementById("create-room"),roomSearch:document.getElementById("room-search"),roomList:document.getElementById("room-list-container"),usernameDisplay:document.getElementById("username-display"),logOut:document.getElementById("log-out"),roomTitle:document.getElementById("room-title"),chatList:document.getElementById("chat-list-container"),chatField:document.getElementById("chat-field"),popup:document.getElementById("popup"),popupForm:document.getElementById("popup-form")},o=function(){n.createRoom.addEventListener("click",(function(){a("createRoom")}))},r={login:{title:"login",objects:[{name:"username"},{name:"password",type:"password"}],api:e+"/api/users/login",created:function(){var e=document.createElement("a");e.textContent="sign up?",e.addEventListener("click",(function(){a("register")}),{once:!0}),n.popupForm.appendChild(e)},completed:function(e){return sessionStorage.setItem("username",e.username),sessionStorage.setItem("userId",e.userId),sessionStorage.setItem("token",e.token),o(),s(),!0}},register:{title:"register",objects:[{name:"username"},{name:"email",type:"email"},{name:"password",type:"password"}],api:e+"/api/users/register",created:function(){var e=document.createElement("a");e.textContent="login?",e.addEventListener("click",(function(){a("login")}),{once:!0}),n.popupForm.appendChild(e)},completed:function(){return a("login")}},createRoom:{title:"create room",objects:[{name:"name",label:"room name"},{name:"description"},{name:"status",label:"type (public/hidden/private)"},{name:"password (leave blank if public)",type:"password"}],api:e+"/api/rooms/create",created:function(){var e=document.createElement("button");e.textContent="cancel",e.addEventListener("click",(function(){n.popupForm.innerHTML="",n.popup.className="hidden"}),{once:!0}),n.popupForm.appendChild(e)}},joinRoom:{title:"join room",objects:[{name:"password",type:"password"}],api:e+"/api/rooms/join"}},a=function(e,o){n.popup.className="",r[e]||(n.popupForm.innerHTML="form inputs of name "+e+" not available.",console.error("form inputs of name "+e+" not available.")),n.popupForm.innerHTML=r[e].title+(o?"\n"+o:"");for(var s=r[e].objects,i={},c=0;c<s.length;c++){var m="temp-"+s[c].name+"-("+Math.random()+")",p=document.createElement("label");p.htmlFor=m,p.textContent=s[c].label||s[c].name;var u=document.createElement("input");u.id=m,u.placeholder="...",u.type=s[c].type||"text",n.popupForm.append(p,u),i[s[c].name]=u}r[e].created&&r[e].created();var d=document.createElement("button");return d.textContent=r[e].title,n.popupForm.appendChild(d),d.addEventListener("click",(function(){var o={token:sessionStorage.getItem("token")};for(var s in i)o[s]=i[s].value;t(r[e].api,o,(function(t){return t.success?(n.popup.className="hidden",r[e].completed?r[e].completed(t):void 0):a(e,t.response)}))}),{once:!0}),!0},s=function(){sessionStorage.getItem("username")&&(n.usernameDisplay.textContent=sessionStorage.getItem("username")),n.logOut.addEventListener("click",(function(){sessionStorage.getItem("token")&&t(e+"/api/users/logout",{token:sessionStorage.getItem("token")},(function(){n.roomList.innerHTML="",n.chatList.innerHTML="",sessionStorage.removeItem("token"),a("login")}))}))};sessionStorage.getItem("token")?t(e+"/api/users/checktoken",{token:sessionStorage.getItem("token")},(function(e){!0!==e.success||"success"!==e.response?a("login","expired"===e.response?"session expired":void 0):(o(),s(),n.popup.className="hidden")})):a("login")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,