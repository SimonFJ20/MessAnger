(()=>{"use strict";var e={createRoom:document.getElementById("create-room"),roomSearch:document.getElementById("room-search"),roomList:document.getElementById("room-list-container"),usernameDisplay:document.getElementById("username-display"),logOut:document.getElementById("log-out"),roomTitle:document.getElementById("room-title"),chatList:document.getElementById("chat-list-container"),chatField:document.getElementById("chat-field"),popup:document.getElementById("popup"),popupForm:document.getElementById("popup-form")},t={login:[{name:"username"},{name:"password",type:"password"}],register:[{name:"username"},{name:"email",type:"mail"},{name:"password",type:"password"}],createRoom:[{name:"name"},{name:"password",type:"password"}],joinRoom:[{name:"password",type:"password"}]},o=function(n,r){e.popup.className="";var a={};e.popupForm.innerHTML=r||"",t[n]||(e.popupForm.innerHTML="form inputs of name "+n+" not available.",console.error("form inputs of name "+n+" not available."));for(var m=t[n],p=0;p<m.length;p++){var c="temp-"+m[p]+"-("+Math.random()+")",d=document.createElement("label");d.htmlFor=c,d.textContent=m[p].name;var l=document.createElement("input");l.id=c,l.placeholder="...",l.type=m[p].type||"text",e.popupForm.append(d,l),a[m[p].name]=l}var s=document.createElement("button");s.textContent="submit",e.popupForm.appendChild(s),s.addEventListener("click",(function(){console.log("clicked");var t={};for(var r in a)t[r]=a[n];!function(e,t,o){var n=JSON.stringify(t),r=new Headers;r.append("Content-Type","application/json");try{fetch("url",{method:"POST",headers:r,body:n,redirect:"follow"}).then((function(e){return e.json()})).then((function(e){return o(e)})).catch((function(e){return o(e)}))}catch(e){o(e)}}(0,t,(function(t){if(!t.success)return console.error(t.response),void o(n,t);e.popup.className="hidden"}))}),{once:!0})};o("login","login required")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,